(defun print-result(game players points looser)
  (cond ((> game 0) 
    (format t "~%~a~%" "-------------------------------------------------------------------------")
    (format t "~a apaksspele ir beigusies. speletajiem tika pieskaitits sekojoss soda punktu~%" (num-to-game game))
    (format t "~a~%" "skaits:"))
    (t (format t "~%~a~%" "-------------------------------------------------------------------------")
      (format t "spele ir beigusies. speletajiem tika pieskaitits sekojoss soda punktu~%" (num-to-game game))
      (format t "~a~%" "skaits:")))
  (display-list 1 players points)
  (format t "~%~%~a~%" "-------------------------------------------------------------------------") 
  (cond ((null looser) nil)
    (t
      (format t "~%~%~a~%" "=========================================================================")     
      (format t "spele ir beigusies. speli ir zaudejis ~@(~a.~)~%" looser                   ) 
      (format t "~a~%" "========================================================================="))
))

(defun display-list(i lst l)
  (cond ((null lst) nil)
  (t (format t "~& ~{~2d) ~@(~2@a:~) -~(~1@a~)~}" (list i (car lst) (car l)))
    (display-list (+ i 1) (cdr lst) (cdr l)))
  )
)

(defun print-cards(player cards)
  (format t "~%~@(~a~):~%" player)
  (display-card cards 1)
  (format t "~%"))

(defun display-card(lst i)
  (cond ((null lst) nil)
    ((< (cadar lst) 4) (format t "~& ~{~2d) ~(~a~) ~(~a~)~}" (list i (num-to-type (cadar lst)) (num-to-card (caar lst))))
      (display-card (cdr lst) (+ i 1)))
    (t (format t "~& ~{~2d) ~(~a~) ~(~a~)~}" (list i (num-to-card (caar lst)) (num-to-type (cadar lst))))
      (display-card (cdr lst) (+ i 1)))))

(defun print-rules(num)
  (cond ((equal num 0)
    (format t "~a~%" "-------------------------------------------------------------------------")
    (format t "~a~%" "  speles noteikumi:                                                      ")
    (format t "~a~%" "-------------------------------------------------------------------------")
    (format t "~a~%" "   spele \"king\". speletaju kartiba cilveks - dators - cilveks - dators.")
    (format t "~a~%" "spele tiek izmantotas 32 kartis (karsu komplekta neietilpst sesinieki).  ")
    (format t "~a~%" "spele sastav no 6 apaksspelem, kas sakas, kad kartis tiek izdalitas un   ") 
    (format t "~a~%" "beidzas, kad visas tiek izmestas ara.")
    (format t "~a~%" "pirmais, kas sak apaksspeli izmet ara vienu karts, parejiem ir jaizmet")
    (format t "~a~%" "ara tada pasa masts karts, ja tada masts nav, ir jaizmet ara jebkura cita")
    (format t "~a~%" "masts karts. speletajs, kurs izmeta ara vajadzigas masts karti ar")
    (format t "~a~%" "vislielako nominalu, nem ta saucamo stiki. tam, kurs panema stiki, tiek")
    (format t "~a~%~%" "pieskaititi soda punkti atkariba no apaksspeles noteikumiem."))
    ((equal num 1)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  pirma apaksspele:                                                      ")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  nedrikst nemt nevienu no stikiem. par katru panemto stiki 2 soda punkti")
      (format t "~a~%~%" "(-2). maksimalais soda punktu skaits: -16."))
    ((equal num 2)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  otra apaksspele:                                                       ")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  nedrikst nemt nevienu sirds karti. par katru panemto sirds karti 2 soda") 
      (format t "~a~%" "punkti (-2). nedrikst sakt speli ar sirds kartim, ja rokas ir citas masts")
      (format t "~a~%~%" "kartis. maksimalais soda punktu skaits: -16."))
    ((equal num 3)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  tresa apaksspele:                                                      ")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  nedrikst nemt nevienu kalpu. par katru panemto kalpu 4 soda punkti(-4).") 
      (format t "~a~%~%" "maksimalais soda punktu skaits: -16."))
    ((equal num 4)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  ceturta appakspele:                                                    ")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "   nedrikst nemt nevienu damu. par katru panemto damu 4 soda punkti (-4).") 
      (format t "~a~%~%" "maksimalais soda punktu skaits: -16."))
    ((equal num 5)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  piekta appakspele:                                                     ")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "   nedrikst nemt 2 pedejus stikus. par katru panemto stiki 8 soda punkti ") 
      (format t "~a~%~%" "(-8). maksimalais soda punktu skaits: -16."))
    ((equal num 6)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  sesta appakspele:                                                      ")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  nedrikst nemt sirds karali. ja uz rokam nav vajadzigas masts karts un  ")
      (format t "~a~%" "ir sirds karalis, tad obligati ir jaiet ar to. par sirds karali 16 soda  ")
      (format t "~a~%" "punkti (-16). nedrikst sakt speli ar sirds kartim, ja uz rokam ir citu   ")
      (format t "~a~%~%" "mastu kartis."))))

(defun print-message(num player cards sods)
  (prog (input)
  (format t "~%" )
  (cond 
    ((= num 0)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t        "~a gajiens. jums ir pieejamas sekojosas kartis:~%" player)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (display-card cards 1)
    )
    ((= num 1)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t        "ievadiet karts numuru, ar kuru jus gribat izdarit gajienu.    ~%")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (setq input (read))
      (cond ((not (numberp input)) (print-error 1) (return (print-message 1 nil nil nil))) 
            (t (cond 
              ((< input 1)
                (print-error 1)
                (return (print-message 1 nil nil nil)))
              (t (return input))))))
    ((= num 2)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t        "pirma datora gajiens. izmestas kartis pec gajiena:            ~%")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (display-card cards 1))
    ((= num 3)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t        "otra datora gajiens. izmestas kartis pec gajiena:            ~%")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (display-card cards 1)) 
    ((= num 4)
      (format t "~a~%" " ")
      (format t        "izmestas kartis pec gajiena:         ~%")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (display-card cards 1))
    ((= num 5)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t        "speletajs ~a ir panemis stiki. speletajam tika pieskaititi ~a soda punkti.~%" player sods)
      (format t "~a~%" "-------------------------------------------------------------------------")))))

(defun print-error(num)
  (cond ((= num 0)
          (format nil "~a" "spele var spelet tikai 4 speletaji!"))
        ((= num 1)
          (format t "~%~a~%" "-------------------------------------------------------------------------")
          (format t "~a~%" "kluda! jums nav pieejama tada karts. ievadiet karts numuru, ar kuru jus"    ) 
          (format t "~a~%" "gribat izdarit gajienu."                                                    )
          (format t "~a~%" "-------------------------------------------------------------------------" ))
        ((= num 2)
          (format t "~%~a~%" "-------------------------------------------------------------------------")
          (format t "~a~%" "kluda! jus nevarat izmest so karti, jums uz rokam ir karavi. ievadiet "  ) 
          (format t "~a~%" "karts numuru, ar kuru jus gribat izdarit gajienu."                                )
          (format t "~a~%" "-------------------------------------------------------------------------" ))
        ((= num 3)
          (format t "~%~a~%" "-------------------------------------------------------------------------")
          (format t "~a~%" "kluda! jus nevarat izmest so karti, jums uz rokam ir krusti. ievadiet      ") 
          (format t "~a~%" "karts numuru, ar kuru jus gribat izdarit gajienu."                          )
          (format t "~a~%" "-------------------------------------------------------------------------" ))
        ((= num 4)
          (format t "~%~a~%" "-------------------------------------------------------------------------")
          (format t "~a~%" "kluda! jus nevarat izmest so karti, jums uz rokam ir piki. ievadiet karts"  ) 
          (format t "~a~%" "numuru, ar kuru jus gribat izdarit gajienu."                                )
          (format t "~a~%" "-------------------------------------------------------------------------" ))
        ((= num 5)
          (format t "~%~a~%" "-------------------------------------------------------------------------")
          (format t "~a~%" "kluda! jus nevarat izmest so karti, jums uz rokam ir sirdis. ievadiet      ") 
          (format t "~a~%" "karts numuru, ar kuru jus gribat izdarit gajienu."                          )
          (format t "~a~%" "-------------------------------------------------------------------------" ))
        ((= num 6)
          (format t "~%~a~%" "-------------------------------------------------------------------------")
          (format t "~a~%" "kluda! jus nedrikstat sakt speli ar sirds masts karti, jo jums uz rokam    ") 
          (format t "~a~%" "ir citu masts kartis. ievadiet karts numuru, ar kuru jus saksiet speli."    )
          (format t "~a~%" "-------------------------------------------------------------------------" ))
        ((= num 7)
          (format t "~%~a~%" "-------------------------------------------------------------------------")
          (format t "~a~%" "jus nedriksat izdarit sadu gajienu! jums uz rokam ir sirds karalis, ar     ") 
          (format t "~a~%" "kuru jums obligati ir jastaiga."                                            )
          (format t "~a~%" "-------------------------------------------------------------------------" ))))

(prog (wrong-input bot smartbot table current-player psplayer loser-player current-taken current-turn points card-list mini-game-number first-player-number name-list temp)

(defun output(old)
  (cond ((equal old '(1)) (list nil))
    (t old)))

(defun get-name (player-number name-list)
  (cond ((equal player-number 1) (car name-list))
    (t (get-name (- player-number 1) (cdr name-list))))

(defun get-loser(taken first-card loser loser-card-val player)
  (cond ((null (car taken)) loser)
    (t (cond ((and (equal (cdr (car taken)) (cdr first-card))(> (car (car taken)) loser-card-val )) (get-loser (cdr taken) first-card player (car (car taken)) (+ player 1)))
      (t (get-loser (cdr taken) first-card loser loser-card-val (+ player 1)))
    ))
  )
)

(defun set-points (point-list point-count temp new-points)
  (cond ((equal temp loser-player) (set-points (cdr point-list) point-count (+ temp 1) (append new-points (list (+ (car point-list) point-count)))))
    (t (cond ((null (car point-list )) new-points)
      (t (set-points (cdr point-list) point-count (+ temp 1) (append new-points (list (car point-list)))))
    ))
  )
)

(defun count-players-cards (temp players-card-list)
  (cond ((null (car players-card-list)) temp)
    (t (count-players-cards (+ temp 1) (cdr players-card-list)))))

(defun max-table-card (table1 max-card)
  (cond ((null (car table1))  max-card)
    (t (cond ((and (equal (car(cdr(car table1))) (car(cdr(car table)) )) (> (car(car table1)) (car max-card))) (max-table-card (cdr table1) (car table1)))
    (t (max-table-card (cdr table1) max-card))))
  )
)

(defun get-number (spisok-nomerov nomer)
  (cond ((equal 1 nomer) (car spisok-nomerov))
  (t (get-number (cdr spisok-nomerov) (- nomer 1)))))

(defun min-players-cards (cards max-cards max-cards-nums num)
  (cond 
    ((null (car cards)) max-cards-nums)
    ((and 
      (not (and (or (and (equal mini-game-number 6) (equal (car(cdr (car cards))) 1 )) (and  (equal mini-game-number 2) (equal (car (cdr (car cards))) 1))) (equal 1 (got-not-chervi-fun (get-one-players-cards card-list current-player)))))
      (< (car (car cards)) (car (car max-cards)))) (min-players-cards (cdr cards) (list (car cards)) (list num) (+ num 1))) 
    ((and (not (or (and (equal mini-game-number 6) (equal (car (cdr (car cards))) 1)) (and  (equal mini-game-number 2) (equal (car (cdr (car cards))) 1)))) (equal (car (car cards)) (car (car max-cards)))) (min-players-cards (cdr cards) (append  max-cards (list (car cards))) (append max-cards-nums (list num)) (+ num 1)))
    (t (min-players-cards (cdr cards) max-cards max-cards-nums (+ num 1)))))

(defun max-players-cards (cards max-cards max-cards-nums num)
  (cond 
    ((null (car cards)) max-cards-nums)
    ((> (car (car cards)) (car (car max-cards))) (max-players-cards (cdr cards) (list (car cards)) (list num) (+ num 1)))
    ((equal (car (car cards)) (car (car max-cards))) (max-players-cards (cdr cards) (append max-cards (list (car cards))) (append max-cards-nums (list num)) (+ num 1)))
    (t (max-players-cards (cdr cards) max-cards max-cards-nums (+ num 1)))))

(defun ihaverightcard (whatdowesearch minicardlist minfit minfitnum minnotfit minnotfitnum maxnotfit maxnotfitnum num)
(cond ((null (car minicardlist)) (list minfitnum minnotfitnum maxnotfitnum));konec
((equal (car (cdr (car minicardlist)))  (car (cdr whatdowesearch))) 
  (cond
   ((< (car (car minicardlist)) (car whatdowesearch)   )
       (cond
          ((> (car (car minicardlist)) minfit) 
           (ihaverightcard whatdowesearch (cdr minicardlist) (car (car minicardlist)) num minnotfit minnotfitnum maxnotfit maxnotfitnum (+ num 1))
          )
          (t
           (ihaverightcard whatdowesearch (cdr minicardlist) minfit minfitnum minnotfit minnotfitnum maxnotfit maxnotfitnum (+ num 1))
          )
       )
   )
   (t
       (cond
          ((> (car (car minicardlist)) maxnotfit) 
          (cond ((< (car (car minicardlist)) minnotfit) 
          (ihaverightcard whatdowesearch (cdr minicardlist) minfit minfitnum (car (car minicardlist)) num (car (car minicardlist)) num (+ num 1)) )
          (t(ihaverightcard whatdowesearch (cdr minicardlist) minfit minfitnum minnotfit minnotfitnum (car (car minicardlist)) num (+ num 1)))))
          (t(cond
          ((< (car (car minicardlist)) minnotfit) 
          (ihaverightcard whatdowesearch (cdr minicardlist) minfit minfitnum (car (car minicardlist)) num  maxnotfit maxnotfitnum (+ num 1)))
          (t(ihaverightcard whatdowesearch (cdr minicardlist) minfit minfitnum minnotfit minnotfitnum  maxnotfit maxnotfitnum (+ num 1)))))
       )
   )     
  )
)
(t(ihaverightcard whatdowesearch (cdr minicardlist) minfit minfitnum minnotfit minnotfitnum maxnotfit maxnotfitnum (+ num 1))))
)

(defun gopc ()
(cond
((and (or (equal currentplayer 1) (equal currentplayer 3))(not (equal smartbot 1)))
(setq temp (+ (random 12 ) 1)) temp) 
(t(cond((equal psplayer 1)
(getnumber (minplayerscards (output(getoneplayerscards cardlist currentplayer)) '((100 100)) '(0) 1) (+ 1 (random (countplayerscards 0 (minplayerscards (output(getoneplayerscards cardlist currentplayer)) '((100 100)) '(0) 1)) )))
)
(t(cond 
  ((not (equal '(100 100 100) (ihaverightcard (maxtablecard table '(0 0)) (output(getoneplayerscards cardlist currentplayer)) '0 '100 '100 '100  '0 '100 '1) ))
    (setq temp (ihaverightcard (maxtablecard table '(0 0)) (output(getoneplayerscards cardlist currentplayer)) '0 '100 '100 '100  '0 '100 '1))
               (cond
                ((< (car temp) '100) (car temp))
                (t(cond
                  ((or (equal psplayer 2) (equal psplayer 2)) (car (cdr temp))   )
                  (t (car(cdr(cdr temp)) )))
                 )
                )
  )
(t(cond
((not (and (equal minigamenumber 6)(> (checkkch (getoneplayerscards cardlist currentplayer) 0) 0)))
(setq temp (getnumber (maxplayerscards (output(getoneplayerscards cardlist currentplayer)) '((0 0)) '(0) 1) (+ 1 (random (countplayerscards 0 (maxplayerscards (output(getoneplayerscards cardlist currentplayer)) '((0 0)) '(0) 1)) ))))
)(t(setq temp (getkchnum (getoneplayerscards cardlist currentplayer) 1)))) temp)))
))
)
)

(defun getkchnum (cards nomer)
(cond 
((null (car cards)) '0)
((equal (car cards) '(13 1) ) nomer)
(t (getkchnum (cdr cards) (+ nomer 1)))
)
)

(defun readsel()
(cond 
((or (equal bot 1) (or (equal currentplayer 2) (equal currentplayer 4))) (gopc))
((equal wronginput 1) (read))
(t (printmessage 1 nil (countplayerscards 0 (getoneplayerscards cardlist currentplayer) ) nil))
))

(defun ordinaryturn(red)
(cond 
((equal psplayer 1) (firstturn red))
(t(cond
((>(checkordinarycard (watchcard (getoneplayerscards cardlist currentplayer) red) (getoneplayerscards cardlist currentplayer) ) 0) 
(printerror (checkordinarycard (watchcard (getoneplayerscards cardlist currentplayer) red) (getoneplayerscards cardlist currentplayer) )  )
(ordinaryturn (readsel )))
((or(> red (countplayerscards 0 (getoneplayerscards cardlist currentplayer) )) (<= red 0))
(printerror 1)
(setq wronginput 1)
(ordinaryturn (readsel )))
(t red))))
)

(defun first-turn(red)
  (cond
    ((> (check-first-card (watch-card (get-one-players-cards card-list current-player) red) (get-one-players-cards card-list current-player)) 0)   
      (print-error (check-first-card (watch-card (get-one-players-cards card-list current-player) red) (get-one-players-cards card-list current-player)))
      (first-turn (read-sel)))
    ((or (> red (count-players-cards 0 (get-one-players-cards card-list current-player))) (<= red 0))
      (print-error 1)
      (setq wrong-input 1)
      (ordinary-turn (read-sel)))
    (t red)))

(defun precycle()
  (setq current-player first-player-number)
  (setq ps-player 1)
  (setq current-taken 1)
  (setq table '())
  (setq points '(0 0 0 0))
  (setq current-turn 1)
  (cycle))

(defun make-loser(first-player-number loser-number)
  (cond 
  ((equal first-player-number 1) loser-number)
  (t (make-loser (- first-player-number 1) (cycle-player-number loser-number)))))

(defun cycle()
(cond ((equal currentplayer 2))
((equal currentplayer 4))
(t (printmessage 0 (getname currentplayer namelist) (getoneplayerscards cardlist currentplayer) nil) )
)
(setq temp (throwcard (getoneplayerscards cardlist currentplayer)(ordinaryturn  (readsel )) () nil))
(cardontable (car temp))
(setq cardlist (updateplayer cardlist (cdr temp)  currentplayer  ()))
(cond 
((equal currentplayer 2)  
(printmessage 2 nil table nil))
((equal currentplayer 4)  
(printmessage 3 nil table nil))
(t (printmessage 4 nil table nil) ))
(setq currentplayer (cycleplayernumber currentplayer))
(setq psplayer (cycleplayernumber psplayer))
(cond ((equal currentturn 4) 
(setq currentturn 1) 
(setq loserplayer  (makeloser firstplayernumber (getloser table (car table) '1 '0 '1) )) 
(setq currentplayer loserplayer)
(setq firstplayernumber loserplayer)
(setq points (setpoints points (checkpoints table) '1 '()))
(printmessage 5 (getname loserplayer  namelist) nil (checkpoints table))
(setq currenttaken (+ currenttaken 1))
(format t "~%" )
(setq table '()))
(t (setq currentturn (+ currentturn 1)) ))
(cond 
((< currenttaken 9) (cycle))
(t))
)

(defun outc(player-number cards)
  (print-cards (get-name player-number name-list) (output (get-one-players-cards cards player-number)))
  (print-cards 'galds table))

(defun current-mastj-fun() (car (cdr (car table ))))

(defun gotkch-fun(player-cards)
  (cond 
    ((null (car player-cards) ) 0)
    ((equal (car player-cards) '(13 1)) 1)
    (t (gotkch-fun (cdr player-cards)))))

(defun gotwrongcardsfun(playercards)
(cond
((null (car playercards)) 1)
((equal (car (cdr (car playercards)) ) (currentmastjfun)) 0)
(t (gotwrongcardsfun (cdr playercards))

)
)
)

(defun gotnotchervifun(playercards)
(cond
((null (car playercards)) 0)
((> (car (cdr (car playercards)) ) 1) 1)
(t (gotnotchervifun (cdr playercards))

)
)
)

(defun checkfirstcard (card playercards)
(cond
((and (equal (gotnotchervifun playercards) 1) (or (equal minigamenumber 2) (equal minigamenumber 6))) 
(cond
((equal (car (cdr card)) 1) 6)
(t 0)))
(t 0))
)

(defun checkordinarycard (card playercards)
(cond 
((and (not (equal card '(13 1))) (and (equal (gotkchfun playercards) 1) (and (equal (gotwrongcardsfun playercards ) 1) (equal minigamenumber 6))) )  7)
(t(cond
( (and (not(equal (currentmastjfun) (car (cdr card))) )  (equal (gotwrongcardsfun playercards) 0))    
(cond
((equal (car (cdr (car table))) 1) 5)
((equal (car (cdr (car table))) 2) 2)
((equal (car (cdr (car table))) 3) 3)
((equal (car (cdr (car table))) 4) 4)
))
(t 0))))
)

(defun checkpoints (takencards)
(cond
((equal minigamenumber 1) 2)
((equal minigamenumber 2)
(*(checkchervi takencards '0) 2))
((equal minigamenumber 3)
(*(checkvalti takencards '0) 4))
((equal minigamenumber 4)
(*(checkdami takencards '0) 4))
((equal minigamenumber 5)
(cond ((> currenttaken 6) 8) (t 0)))
((equal minigamenumber 6)
(*(checkkch takencards '0) 16)) (t 0))
)

(defun checkkch(takencards kchcount)
(cond
((null (car takencards))  kchcount)
(t (cond
((equal  (car takencards) '(13 1)) 
(checkkch (cdr takencards ) (+ kchcount 1)))
(t (checkkch (cdr takencards )  kchcount ))))))

(defun checkvalti(takencards valticount)
(cond
((null (car takencards))  valticount)
(t (cond
((equal (car (car takencards)) 11) 
(checkvalti (cdr takencards ) (+ valticount 1)))
(t(checkvalti (cdr takencards )  valticount )))))
)

(defun checkdami(takencards damicount)
(cond
((null (car takencards))  damicount)
(t (cond
((equal (car (car takencards)) 12) 
(checkdami (cdr takencards ) (+ damicount 1)))
(t (checkdami (cdr takencards )  damicount )))))
)

(defun checkchervi(takencards chervicount)
(cond
((null (car takencards))  chervicount)
(t (cond
((equal (car (cdr (car takencards))) 1) 
(checkchervi (cdr takencards ) (+ chervicount 1)))
(t (checkchervi (cdr takencards )  chervicount )))))
)

(defun cardontable(card)
(setq table (append table (list card))) table)

(defun cycleplayernumber(playernumber)
(cond ((equal playernumber 4) 1)
(t (+ playernumber 1)))
)

(defun updateplayer (cardlist minicardlist playernumber newcardlist)
(cond ((null  (car minicardlist) ) (setq minicardlist '((1))))) 
(cond((null (car cardlist)) newcardlist )
(t (cond
((equal playernumber 1) (updateplayer (cdr cardlist) minicardlist (- playernumber 1)  (append  newcardlist minicardlist)))
(t (updateplayer (cdr cardlist) minicardlist (- playernumber 1)  (append newcardlist (list (car cardlist))))
))))
)

(defun watchcard (minicardlist cardnumber)
(cond ((equal cardnumber 1) (car minicardlist))
(t (watchcard (cdr minicardlist) (- cardnumber 1)))
))

(defun throwcard (minicardlist cardnumber newcardlist card)
(cond ((null (car minicardlist)) (append (list card)(list newcardlist)))
(t (cond
((equal cardnumber 1) (throwcard (cdr minicardlist) (- cardnumber 1) newcardlist (car minicardlist))) 
(t  (throwcard (cdr minicardlist) (- cardnumber 1) (append newcardlist (list (car minicardlist))) card ) ))))
)

(defun get-one-players-cards (card-list player-number)
  (cond
    ((equal player-number 1) (car card-list))
    (t (get-one-players-cards (cdr card-list) (- player-number 1)))))

(defun start-mini-game (card-list1 mini-game-number1 first-player-number1 name-list1)
  (setq card-list card-list1)
  (setq mini-game-number mini-game-number1)
  (setq first-player-number first-player-number1)
  (setq name-list name-list1)
  (precycle) points)

(defun card-pick( lelements ipos )
  (cond
    ((zerop ipos) (car lelements))
    (t(card-pick (cdr lelements) (- ipos 1)))
  )
)

(defun delete-element-from-pos( lelements ipos )
  (cond
    ((zerop ipos) (cdr lelements))
    (t(cons(car lelements)(delete-element-from-pos (cdr lelements) (- ipos 1))))
  )
)

(defun delete-element( lelements icard itype )
  (cond
    ((null lelements) nil)
    ((and (equal (car (car lelements)) icard) (equal (cdr (car lelements)) itype)) 
      (cdr lelements) 
    )
    (t(cons(car lelements)(delete-element (cdr lelements) icard itype )))
  )
)

(defun refresh-elements( lelements lresult )
  (cond
    ((null (car lresult)) lelements)
    (t(refresh-elements (delete-element lelements (car (car lresult)) (cdr (car lresult))) ( cdr lresult )))
  )
)

(defun deal-set( lelements isize icount ipos )
  (cond
    ((zerop isize) nil)
    ((and(equal isize 8)(equal icount 7)) (deal-set lelements isize isize ipos))
    ((equal icount 1) (cons(card-pick lelements ipos) nil))
    (t(cons(card-pick lelements ipos)( deal-set ( delete-element-from-pos lelements ipos ) (- isize 1) (- icount 1) (random (- isize 1)))))
  )
)

(defun deal-cards( lelements isize ileft iplayers icount lsetresult )
  (setq lelements (refresh-elements lelements lsetresult))
  
  (cond
    ((zerop ileft) (list lsetresult))
    (t(cons lsetresult (deal-cards lelements (- isize icount) (- ileft 1) iplayers icount ( deal-set lelements (- isize icount) icount (random (- isize icount))))))
  )
)

(defun generate-cards( icard itype )
  (cond
    ((equal icard 8) nil)
    ((equal itype 5) ( generate-cards (+ icard 1) 1))
    (t(cons (list (+ 7 icard) itype) (generate-cards icard (+ itype 1))))
  )
)

(defun deal( lelements iplayers )
  (cond
    ((zerop iplayers) nil)
    (t(deal-cards lelements 32 (- iplayers 1) iplayers 8 ( deal-set lelements 32 8 (random 32))))
  )
)

(defun add-results( lresultsa lresultsb )
  (cond
    ((or (null lresultsa) (null lresultsb)) nil)
    (t(cons (+ (car lresultsa) (car lresultsb))(add-results (cdr lresultsa) (cdr lresultsb))))
  )
)

(defun %( a b )
  (cond ((< a b) a) (t (% (- a b) b)))
)

(defun play( isubgame iplayer lscores lnames ) (prog( lresult )
  (print-rules isubgame)
  (setq lresult (start-mini-game (deal (generate-cards 0 1) 4) isubgame iplayer lnames))
  (print-result isubgame lnames lresult nil)
  
  (cond
    ((equal isubgame 6) (return (add-results lscores lresult)))
    (t (return (play (+ isubgame 1) (+ (% iplayer 4) 1) (add-results lscores lresult) lnames)))
  )
))

(defun get-names( ) (prog( lnames )
    (format t "~a~%" "-------------------------------------------------------------------------")
    (format t "~a~%" "  ievadiet pirma speletaja vardu:                                        ")
    (format t "~a~%" "-------------------------------------------------------------------------")
  (setq lnames (read))
    (format t "~a~%" "-------------------------------------------------------------------------")
    (format t "~a~%" "  ievadiet otra speletaja vardu:                                        ")
    (format t "~a~%" "-------------------------------------------------------------------------")
  (return (cons lnames (read))) 
))

(defun find-looser( lelements lnames iminimum szlooser )
  (cond
    ((null lelements) szlooser)
    ((> (car lelements) iminimum) (find-looser (cdr lelements) (cdr lnames) (car lelements) (car lnames)))
    (t (find-looser (cdr lelements) (cdr lnames) iminimum szlooser))
  )
)

(defun num-to-card( inum )
  (cond
    ((equal inum 7) 'septitnieks)
    ((equal inum 8) 'astotnieks)
    ((equal inum 9) 'devitnieks)
    ((equal inum 10) 'desmitnieks)
    ((equal inum 11) 'kalps)
    ((equal inum 12) 'dama)
    ((equal inum 13) 'karalis)
    ((equal inum 14) 'duzis)
  )
)

(defun num-to-game( inum )
  (cond
    ((equal inum 1) 'pirma)
    ((equal inum 2) 'otra)
    ((equal inum 3) 'tresa)
    ((equal inum 4) 'ceturta)
    ((equal inum 5) 'piekta)
    ((equal inum 6) 'sesta)
  )
)

(defun num-to-type( inum )
  (cond
    ((equal inum 1) 'sirds)
    ((equal inum 2) 'karavu)
    ((equal inum 3) 'krusta)
    ((equal inum 4) 'piki)
  )
)

(defun play-king() (prog( lnames lresults )
  (print-rules 0)

  (setq lnames (get-names))
  (setq lnames (append (cons (car lnames) '("pirmais dators")) (cons (cdr lnames) '("otrais dators"))))
  
  (setq lresults (play 1 (+ 1 (random 4)) '(0 0 0 0) lnames))
  (print-result 0 lnames lresults (find-looser lresults lnames 0 0))
  (return 0)
))
