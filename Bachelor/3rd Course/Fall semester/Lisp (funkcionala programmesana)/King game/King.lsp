(defun print-result (game players points looser)
  (cond ((> game 0) 
    (format t "~%~a~%" "-------------------------------------------------------------------------")
    (format t "~a apaksspele ir beigusies. speletajiem tika pieskaitits sekojoss soda punktu~%" (num-to-game game))
    (format t "~a~%" "skaits:"))
    (t (format t "~%~a~%" "-------------------------------------------------------------------------")
      (format t "spele ir beigusies. speletajiem tika pieskaitits sekojoss soda punktu~%" (num-to-game game))
      (format t "~a~%" "skaits:")))
  (display-list 1 players points)
  (format t "~%~%~a~%" "-------------------------------------------------------------------------") 
  (cond ((null looser) nil)
        (t
          (format t "~%~%~a~%" "=========================================================================")     
          (format t "spele ir beigusies. speli ir zaudejis ~@(~a.~)~%" looser                   ) 
          (format t "~a~%" "========================================================================="))))

(defun display-list (i lst l)
  (cond ((null lst) nil)
        (t (format t "~& ~{~2d) ~@(~2@a:~) -~(~1@a~)~}" (list i (car lst) (car l)))
          (display-list (+ i 1) (cdr lst) (cdr l)))))

(defun print-cards (player cards)
  (format t "~%~@(~a~):~%" player)
  (display-card cards 1)
  (format t "~%"))

(defun display-card (lst i)
  (cond ((null lst) nil)
        ((< (cadar lst) 4) (format t "~& ~{~2d) ~(~a~) ~(~a~)~}" (list i (num-to-type (cadar lst)) (num-to-card (caar lst))))
          (display-card (cdr lst) (+ i 1)))
        (t (format t "~& ~{~2d) ~(~a~) ~(~a~)~}" (list i (num-to-card (caar lst)) (num-to-type (cadar lst))))
          (display-card (cdr lst) (+ i 1)))))

(defun print-rules (num)
  (cond ((equal num 0)
    (format t "~a~%" "-------------------------------------------------------------------------")
    (format t "~a~%" "  speles noteikumi:                                                      ")
    (format t "~a~%" "-------------------------------------------------------------------------")
    (format t "~a~%" "   spele \"king\". speletaju kartiba cilveks - dators - cilveks - dators.")
    (format t "~a~%" "spele tiek izmantotas 32 kartis (karsu komplekta neietilpst sesinieki).  ")
    (format t "~a~%" "spele sastav no 6 apaksspelem, kas sakas, kad kartis tiek izdalitas un   ") 
    (format t "~a~%" "beidzas, kad visas tiek izmestas ara.")
    (format t "~a~%" "pirmais, kas sak apaksspeli izmet ara vienu karts, parejiem ir jaizmet")
    (format t "~a~%" "ara tada pasa masts karts, ja tada masts nav, ir jaizmet ara jebkura cita")
    (format t "~a~%" "masts karts. speletajs, kurs izmeta ara vajadzigas masts karti ar")
    (format t "~a~%" "vislielako nominalu, nem ta saucamo stiki. tam, kurs panema stiki, tiek")
    (format t "~a~%~%" "pieskaititi soda punkti atkariba no apaksspeles noteikumiem."))
    ((equal num 1)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  pirma apaksspele:                                                      ")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  nedrikst nemt nevienu no stikiem. par katru panemto stiki 2 soda punkti")
      (format t "~a~%~%" "(-2). maksimalais soda punktu skaits: -16."))
    ((equal num 2)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  otra apaksspele:                                                       ")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  nedrikst nemt nevienu sirds karti. par katru panemto sirds karti 2 soda") 
      (format t "~a~%" "punkti (-2). nedrikst sakt speli ar sirds kartim, ja rokas ir citas masts")
      (format t "~a~%~%" "kartis. maksimalais soda punktu skaits: -16."))
    ((equal num 3)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  tresa apaksspele:                                                      ")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  nedrikst nemt nevienu kalpu. par katru panemto kalpu 4 soda punkti(-4).") 
      (format t "~a~%~%" "maksimalais soda punktu skaits: -16."))
    ((equal num 4)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  ceturta appakspele:                                                    ")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "   nedrikst nemt nevienu damu. par katru panemto damu 4 soda punkti (-4).") 
      (format t "~a~%~%" "maksimalais soda punktu skaits: -16."))
    ((equal num 5)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  piekta appakspele:                                                     ")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "   nedrikst nemt 2 pedejus stikus. par katru panemto stiki 8 soda punkti ") 
      (format t "~a~%~%" "(-8). maksimalais soda punktu skaits: -16."))
    ((equal num 6)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  sesta appakspele:                                                      ")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t "~a~%" "  nedrikst nemt sirds karali. ja uz rokam nav vajadzigas masts karts un  ")
      (format t "~a~%" "ir sirds karalis, tad obligati ir jaiet ar to. par sirds karali 16 soda  ")
      (format t "~a~%" "punkti (-16). nedrikst sakt speli ar sirds kartim, ja uz rokam ir citu   ")
      (format t "~a~%~%" "mastu kartis."))))

(defun print-message (num player cards sods)
  (prog (input)
  (format t "~%" )
  (cond 
    ((= num 0)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t        "~a gajiens. jums ir pieejamas sekojosas kartis:~%" player)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (display-card cards 1)
    )
    ((= num 1)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t        "ievadiet karts numuru, ar kuru jus gribat izdarit gajienu.    ~%")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (setq input (read))
      (cond ((not (numberp input)) (print-error 1) (return (print-message 1 nil nil nil))) 
            (t (cond 
              ((< input 1)
                (print-error 1)
                (return (print-message 1 nil nil nil)))
              (t (return input))))))
    ((= num 2)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t        "pirma datora gajiens. izmestas kartis pec gajiena:            ~%")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (display-card cards 1))
    ((= num 3)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t        "otra datora gajiens. izmestas kartis pec gajiena:            ~%")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (display-card cards 1)) 
    ((= num 4)
      (format t "~a~%" " ")
      (format t        "izmestas kartis pec gajiena:         ~%")
      (format t "~a~%" "-------------------------------------------------------------------------")
      (display-card cards 1))
    ((= num 5)
      (format t "~a~%" "-------------------------------------------------------------------------")
      (format t        "speletajs ~a ir panemis stiki. speletajam tika pieskaititi ~a soda punkti.~%" player sods)
      (format t "~a~%" "-------------------------------------------------------------------------")))))

(defun print-error (num)
  (cond ((= num 0)
          (format nil "~a" "spele var spelet tikai 4 speletaji!"))
        ((= num 1)
          (format t "~%~a~%" "-------------------------------------------------------------------------")
          (format t "~a~%" "kluda! jums nav pieejama tada karts. ievadiet karts numuru, ar kuru jus"    ) 
          (format t "~a~%" "gribat izdarit gajienu."                                                    )
          (format t "~a~%" "-------------------------------------------------------------------------" ))
        ((= num 2)
          (format t "~%~a~%" "-------------------------------------------------------------------------")
          (format t "~a~%" "kluda! jus nevarat izmest so karti, jums uz rokam ir karavi. ievadiet "  ) 
          (format t "~a~%" "karts numuru, ar kuru jus gribat izdarit gajienu."                                )
          (format t "~a~%" "-------------------------------------------------------------------------" ))
        ((= num 3)
          (format t "~%~a~%" "-------------------------------------------------------------------------")
          (format t "~a~%" "kluda! jus nevarat izmest so karti, jums uz rokam ir krusti. ievadiet      ") 
          (format t "~a~%" "karts numuru, ar kuru jus gribat izdarit gajienu."                          )
          (format t "~a~%" "-------------------------------------------------------------------------" ))
        ((= num 4)
          (format t "~%~a~%" "-------------------------------------------------------------------------")
          (format t "~a~%" "kluda! jus nevarat izmest so karti, jums uz rokam ir piki. ievadiet karts"  ) 
          (format t "~a~%" "numuru, ar kuru jus gribat izdarit gajienu."                                )
          (format t "~a~%" "-------------------------------------------------------------------------" ))
        ((= num 5)
          (format t "~%~a~%" "-------------------------------------------------------------------------")
          (format t "~a~%" "kluda! jus nevarat izmest so karti, jums uz rokam ir sirdis. ievadiet      ") 
          (format t "~a~%" "karts numuru, ar kuru jus gribat izdarit gajienu."                          )
          (format t "~a~%" "-------------------------------------------------------------------------" ))
        ((= num 6)
          (format t "~%~a~%" "-------------------------------------------------------------------------")
          (format t "~a~%" "kluda! jus nedrikstat sakt speli ar sirds masts karti, jo jums uz rokam    ") 
          (format t "~a~%" "ir citu masts kartis. ievadiet karts numuru, ar kuru jus saksiet speli."    )
          (format t "~a~%" "-------------------------------------------------------------------------" ))
        ((= num 7)
          (format t "~%~a~%" "-------------------------------------------------------------------------")
          (format t "~a~%" "jus nedriksat izdarit sadu gajienu! jums uz rokam ir sirds karalis, ar     ") 
          (format t "~a~%" "kuru jums obligati ir jastaiga."                                            )
          (format t "~a~%" "-------------------------------------------------------------------------" ))))

(prog (wrong-input bot smartbot table current-player ps-player loser-player current-taken current-turn points card-list mini-game-number first-player-number name-list temp)

(defun output (old)
  (cond ((equal old '(1)) (list nil))
    (t old)))

(defun get-name (player-number name-list)
  (cond ((equal player-number 1) (car name-list))
    (t (get-name (- player-number 1) (cdr name-list))))

(defun get-loser (taken first-card loser loser-card-val player)
  (cond ((null (car taken)) loser)
    (t (cond ((and (equal (cdr (car taken)) (cdr first-card))(> (car (car taken)) loser-card-val )) (get-loser (cdr taken) first-card player (car (car taken)) (+ player 1)))
      (t (get-loser (cdr taken) first-card loser loser-card-val (+ player 1)))
    ))
  )
)

(defun set-points (point-list point-count temp new-points)
  (cond ((equal temp loser-player) (set-points (cdr point-list) point-count (+ temp 1) (append new-points (list (+ (car point-list) point-count)))))
        (t (cond ((null (car point-list )) new-points)
           (t (set-points (cdr point-list) point-count (+ temp 1) (append new-points (list (car point-list)))))))))

(defun count-players-cards (temp players-card-list)
  (cond ((null (car players-card-list)) temp)
        (t (count-players-cards (+ temp 1) (cdr players-card-list)))))

(defun max-table-card (table1 max-card)
  (cond ((null (car table1)) max-card)
        (t (cond ((and (equal (car(cdr(car table1))) (car(cdr(car table)) )) (> (car(car table1)) (car max-card))) (max-table-card (cdr table1) (car table1)))
        (t (max-table-card (cdr table1) max-card))))))

(defun get-number (spisok-nomerov nomer)
  (cond ((equal 1 nomer) (car spisok-nomerov))
        (t (get-number (cdr spisok-nomerov) (- nomer 1)))))

(defun min-players-cards (cards max-cards max-cards-nums num)
  (cond 
    ((null (car cards)) max-cards-nums)
    ((and 
      (not (and (or (and (equal mini-game-number 6) (equal (car(cdr (car cards))) 1 )) (and  (equal mini-game-number 2) (equal (car (cdr (car cards))) 1))) (equal 1 (got-not-chervi-fun (get-one-players-cards card-list current-player)))))
      (< (car (car cards)) (car (car max-cards)))) (min-players-cards (cdr cards) (list (car cards)) (list num) (+ num 1))) 
    ((and (not (or (and (equal mini-game-number 6) (equal (car (cdr (car cards))) 1)) (and  (equal mini-game-number 2) (equal (car (cdr (car cards))) 1)))) (equal (car (car cards)) (car (car max-cards)))) (min-players-cards (cdr cards) (append  max-cards (list (car cards))) (append max-cards-nums (list num)) (+ num 1)))
    (t (min-players-cards (cdr cards) max-cards max-cards-nums (+ num 1)))))

(defun max-players-cards (cards max-cards max-cards-nums num)
  (cond 
    ((null (car cards)) max-cards-nums)
    ((> (car (car cards)) (car (car max-cards))) (max-players-cards (cdr cards) (list (car cards)) (list num) (+ num 1)))
    ((equal (car (car cards)) (car (car max-cards))) (max-players-cards (cdr cards) (append max-cards (list (car cards))) (append max-cards-nums (list num)) (+ num 1)))
    (t (max-players-cards (cdr cards) max-cards max-cards-nums (+ num 1)))))

(defun i-have-right-card (what-do-we-search mini-card-list min-fit min-fit-num min-not-fit min-not-fit-num max-not-fit max-not-fit-num num)
  (cond 
    ((null (car mini-card-list)) (list min-fit-num min-not-fit-num max-not-fit-num))
    ((equal (car (cdr (car mini-card-list))) (car (cdr what-do-we-search))) 
      (cond
        ((< (car (car mini-card-list)) (car what-do-we-search))
          (cond
            ((> (car (car mini-card-list)) min-fit) 
              (i-have-right-card what-do-we-search (cdr mini-card-list) (car (car mini-card-list)) num min-not-fit min-not-fit-num max-not-fit max-not-fit-num (+ num 1))
            )
            (t (i-have-right-card what-do-we-search (cdr mini-card-list) min-fit min-fit-num min-not-fit min-not-fit-num max-not-fit max-not-fit-num (+ num 1)))))
        (t (cond
            ((> (car (car mini-card-list)) max-not-fit) 
              (cond 
                ((< (car (car mini-card-list)) min-not-fit) 
                (i-have-right-card what-do-we-search (cdr mini-card-list) min-fit min-fit-num (car (car mini-card-list)) num (car (car mini-card-list)) num (+ num 1)))
                (t (i-have-right-card what-do-we-search (cdr mini-card-list) min-fit min-fit-num min-not-fit min-not-fit-num (car (car mini-card-list)) num (+ num 1))))
            )
            (t (cond
                  ((< (car (car mini-card-list)) min-not-fit) 
                   (i-have-right-card what-do-we-search (cdr mini-card-list) min-fit min-fit-num (car (car mini-card-list)) num  max-not-fit max-not-fit-num (+ num 1)))
                  (t(i-have-right-card what-do-we-search (cdr mini-card-list) min-fit min-fit-num min-not-fit min-not-fit-num  max-not-fit max-not-fit-num (+ num 1)))))))))
    (t (i-have-right-card what-do-we-search (cdr mini-card-list) min-fit min-fit-num min-not-fit min-not-fit-num max-not-fit max-not-fit-num (+ num 1)))))

(defun go-pc ()
  (cond
    ((and (or (equal current-player 1) (equal current-player 3))(not (equal smartbot 1)))
     (setq temp (+ (random 12 ) 1)) temp)
    (t (cond
        ((equal ps-player 1)
          (get-number (min-players-cards (output (get-one-players-cards card-list current-player)) '((100 100)) '(0) 1) (+ 1 (random (count-players-cards 0 (min-players-cards (output (get-one-players-cards card-list current-player)) '((100 100)) '(0) 1))))))
        (t (cond 
            ((not (equal '(100 100 100) (i-have-right-card (max-table-card table '(0 0)) (output (get-one-players-cards card-list current-player)) '0 '100 '100 '100  '0 '100 '1)))
              (setq temp (i-have-right-card (max-table-card table '(0 0)) (output (get-one-players-cards card-list current-player)) '0 '100 '100 '100  '0 '100 '1))
                (cond
                  ((< (car temp) '100) (car temp))
                  (t (cond
                    ((or (equal ps-player 2) (equal ps-player 2)) (car (cdr temp)))
                    (t (car (cdr (cdr temp))))))))
            (t (cond
                ((not (and (equal mini-game-number 6)(> (checkkch (get-one-players-cards card-list current-player) 0) 0)))
                  (setq temp (get-number (max-players-cards (output (get-one-players-cards card-list current-player)) '((0 0)) '(0) 1) (+ 1 (random (count-players-cards 0 (maxplayerscards (output (get-one-players-cards card-list current-player)) '((0 0)) '(0) 1))))))
                )
                (t(setq temp (getkchnum (get-one-players-cards card-list current-player) 1)))) temp)))))))

(defun getkchnum (cards nomer)
  (cond 
    ((null (car cards)) '0)
    ((equal (car cards) '(13 1) ) nomer)
    (t (getkchnum (cdr cards) (+ nomer 1)))))

(defun read-sel ()
  (cond 
    ((or (equal bot 1) (or (equal current-player 2) (equal current-player 4))) (go-pc))
    ((equal wrong-input 1) (read))
    (t (print-message 1 nil (count-players-cards 0 (get-one-players-cards card-list current-player)) nil))))

(defun ordinary-turn (red)
  (cond 
    ((equal ps-player 1) (first-turn red))
    (t(cond
        ((> (check-ordinary-card (watch-card (get-one-players-cards card-list current-player) red) (get-one-players-cards card-list current-player)) 0)
          (print-error (check-ordinary-card (watch-card (get-one-players-cards card-list current-player) red) (get-one-players-cards card-list current-player)))
          (ordinary-turn (read-sel)))
        ((or (> red (count-players-cards 0 (get-one-players-cards card-list current-player))) (<= red 0))
          (print-error 1)
          (setq wrong-input 1)
          (ordinary-turn (read-sel)))
        (t red)))))

(defun first-turn (red)
  (cond
    ((> (check-first-card (watch-card (get-one-players-cards card-list current-player) red) (get-one-players-cards card-list current-player)) 0)   
      (print-error (check-first-card (watch-card (get-one-players-cards card-list current-player) red) (get-one-players-cards card-list current-player)))
      (first-turn (read-sel)))
    ((or (> red (count-players-cards 0 (get-one-players-cards card-list current-player))) (<= red 0))
      (print-error 1)
      (setq wrong-input 1)
      (ordinary-turn (read-sel)))
    (t red)))

(defun precycle()
  (setq current-player first-player-number)
  (setq ps-player 1)
  (setq current-taken 1)
  (setq table '())
  (setq points '(0 0 0 0))
  (setq current-turn 1)
  (cycle))

(defun make-loser(first-player-number loser-number)
  (cond 
  ((equal first-player-number 1) loser-number)
  (t (make-loser (- first-player-number 1) (cycle-player-number loser-number)))))

(defun cycle()
  (cond ((equal current-player 2))
        ((equal current-player 4))
        (t (print-message 0 (get-name current-player namelist) (get-one-players-cards card-list current-player) nil)))
  (setq temp (throw-card (get-one-players-cards card-list current-player)(ordinary-turn (read-sel)) () nil))
  (cardontable (car temp))
  (setq card-list (update-player card-list (cdr temp) current-player ()))
  (cond 
    ((equal current-player 2) (print-message 2 nil table nil))
    ((equal current-player 4) (print-message 3 nil table nil))
    (t (print-message 4 nil table nil)))
  (setq current-player (cycle-player-number current-player))
  (setq ps-player (cycle-player-number ps-player))
  (cond ((equal current-turn 4) 
        (setq current-turn 1) 
        (setq loser-player (make-loser first-player-number (get-loser table (car table) '1 '0 '1)))
        (setq current-player loser-player)
        (setq first-player-number loser-player)
        (setq points (set-points points (check-points table) '1 '()))
        (print-message 5 (get-name loser-player name-list) nil (check-points table))
        (setq current-taken (+ current-taken 1))
        (format t "~%" )
        (setq table '()))
        (t (setq current-turn (+ current-turn 1))))
  (cond ((< current-taken 9) (cycle))
        (t)))

(defun outc(player-number cards)
  (print-cards (get-name player-number name-list) (output (get-one-players-cards cards player-number)))
  (print-cards 'galds table))

(defun current-mastj-fun() (car (cdr (car table ))))

(defun gotkch-fun(player-cards)
  (cond 
    ((null (car player-cards) ) 0)
    ((equal (car player-cards) '(13 1)) 1)
    (t (gotkch-fun (cdr player-cards)))))

(defun got-wrong-cards-fun (player-cards)
  (cond
    ((null (car player-cards)) 1)
    ((equal (car (cdr (car player-cards))) (current-mastj-fun)) 0)
    (t (got-wrong-cardsfun (cdr player-cards)))))

(defun got-not-chervi-fun (playercards)
  (cond
    ((null (car player-cards)) 0)
    ((> (car (cdr (car player-cards)) ) 1) 1)
    (t (got-not-chervi-fun (cdr player-cards)))))

(defun check-first-card (card player-cards)
  (cond
    ((and (equal (got-not-chervi-fun player-cards) 1) (or (equal mini-game-number 2) (equal mini-game-number 6)))
     (cond ((equal (car (cdr card)) 1) 6) (t 0)))
    (t 0)))

(defun check-ordinary-card (card player-cards)
  (cond 
    ((and (not (equal card '(13 1))) (and (equal (gotkchfun player-cards) 1) (and (equal (gotwrongcardsfun player-cards) 1) (equal mini-game-number 6)))) 7)
    (t(cond
        ((and (not (equal (current-mastj-fun) (car (cdr card)))) (equal (gotwrongcardsfun player-cards) 0))   
          (cond
            ((equal (car (cdr (car table))) 1) 5)
            ((equal (car (cdr (car table))) 2) 2)
            ((equal (car (cdr (car table))) 3) 3)
            ((equal (car (cdr (car table))) 4) 4)
          )
        )
      (t 0)))))

(defun check-points (taken-cards)
  (cond
    ((equal mini-game-number 1) 2)
    ((equal mini-game-number 2)
      (*(check-chervi taken-cards '0) 2))
    ((equal mini-game-number 3)
      (*(check-valti taken-cards '0) 4))
    ((equal mini-game-number 4)
      (*(check-dami taken-cards '0) 4))
    ((equal mini-game-number 5)
      (cond ((> current-taken 6) 8) (t 0)))
    ((equal mini-game-number 6)
      (*(checkkch taken-cards '0) 16)) (t 0)))

(defun checkkch (taken-cards kchcount)
  (cond
    ((null (car taken-cards)) kchcount)
    (t (cond ((equal (car taken-cards) '(13 1)) (checkkch (cdr taken-cards ) (+ kchcount 1)))
       (t (checkkch (cdr taken-cards )  kchcount))))))

(defun check-valti (taken-cards valti-count)
  (cond
    ((null (car taken-cards)) valti-count)
    (t (cond
        ((equal (car (car taken-cards)) 11) 
        (check-valti (cdr taken-cards) (+ valti-count 1)))
        (t(check-valti (cdr taken-cards) valti-count))))))

(defun check-dami (taken-cards dami-count)
  (cond
    ((null (car taken-cards)) dami-count)
    (t (cond
        ((equal (car (car taken-cards)) 12) (check-dami (cdr taken-cards ) (+ dami-count 1)))
        (t (check-dami (cdr taken-cards) dami-count))))))

(defun check-chervi (taken-cards chervi-count)
  (cond ((null (car taken-cards)) chervi-count)
        (t (cond ((equal (car (cdr (car taken-cards))) 1) 
                 (check-chervi (cdr taken-cards) (+ chervi-count 1)))
                 (t (check-chervi (cdr taken-cards) chervi-count))))))

(defun cardontable(card) (setq table (append table (list card))) table)

(defun cycle-player-number(player-number)
  (cond ((equal player-number 4) 1)
        (t (+ player-number 1))))

(defun update-player (card-list mini-card-list player-number new-card-list)
  (cond ((null  (car mini-card-list)) (setq mini-card-list '((1)))))
  (cond ((null (car card-list)) new-card-list)
        (t (cond ((equal player-number 1) (update-player (cdr card-list) mini-card-list (- player-number 1)  (append  new-card-list mini-card-list)))
                 (t (update-player (cdr card-list) mini-card-list (- player-number 1)  (append new-card-list (list (car card-list)))))))))

(defun watch-card (mini-card-list card-number)
  (cond ((equal card-number 1) (car mini-card-list))
        (t(watch-card (cdr mini-card-list) (- card-number 1)))))

(defun throw-card (mini-card-list card-number new-card-list card)
  (cond ((null (car mini-card-list)) (append (list card) (list new-card-list)))
        (t(cond ((equal card-number 1) (throw-card (cdr mini-card-list) (- card-number 1) new-card-list (car mini-card-list)))
                (t(throw-card (cdr mini-card-list) (- card-number 1) (append new-card-list (list (car mini-card-list))) card))))))

(defun get-one-players-cards (card-list player-number)
  (cond
    ((equal player-number 1) (car card-list))
    (t (get-one-players-cards (cdr card-list) (- player-number 1)))))

(defun start-mini-game (card-list1 mini-game-number1 first-player-number1 name-list1)
  (setq card-list card-list1)
  (setq mini-game-number mini-game-number1)
  (setq first-player-number first-player-number1)
  (setq name-list name-list1)
  (precycle) points)

(defun card-pick( lelements ipos )
  (cond
    ((zerop ipos) (car lelements))
    (t(card-pick (cdr lelements) (- ipos 1)))
  )
)

(defun delete-element-from-pos( lelements ipos )
  (cond
    ((zerop ipos) (cdr lelements))
    (t(cons(car lelements)(delete-element-from-pos (cdr lelements) (- ipos 1))))
  )
)

(defun delete-element( lelements icard itype )
  (cond
    ((null lelements) nil)
    ((and (equal (car (car lelements)) icard) (equal (cdr (car lelements)) itype)) 
      (cdr lelements) 
    )
    (t(cons(car lelements)(delete-element (cdr lelements) icard itype )))
  )
)

(defun refresh-elements( lelements lresult )
  (cond
    ((null (car lresult)) lelements)
    (t(refresh-elements (delete-element lelements (car (car lresult)) (cdr (car lresult))) ( cdr lresult )))
  )
)

(defun deal-set( lelements isize icount ipos )
  (cond
    ((zerop isize) nil)
    ((and(equal isize 8)(equal icount 7)) (deal-set lelements isize isize ipos))
    ((equal icount 1) (cons(card-pick lelements ipos) nil))
    (t(cons(card-pick lelements ipos)( deal-set ( delete-element-from-pos lelements ipos ) (- isize 1) (- icount 1) (random (- isize 1)))))
  )
)

(defun deal-cards( lelements isize ileft iplayers icount lsetresult )
  (setq lelements (refresh-elements lelements lsetresult))
  
  (cond
    ((zerop ileft) (list lsetresult))
    (t(cons lsetresult (deal-cards lelements (- isize icount) (- ileft 1) iplayers icount ( deal-set lelements (- isize icount) icount (random (- isize icount))))))
  )
)

(defun generate-cards( icard itype )
  (cond
    ((equal icard 8) nil)
    ((equal itype 5) ( generate-cards (+ icard 1) 1))
    (t(cons (list (+ 7 icard) itype) (generate-cards icard (+ itype 1))))
  )
)

(defun deal( lelements iplayers )
  (cond
    ((zerop iplayers) nil)
    (t(deal-cards lelements 32 (- iplayers 1) iplayers 8 ( deal-set lelements 32 8 (random 32))))
  )
)

(defun add-results( lresultsa lresultsb )
  (cond
    ((or (null lresultsa) (null lresultsb)) nil)
    (t(cons (+ (car lresultsa) (car lresultsb))(add-results (cdr lresultsa) (cdr lresultsb))))
  )
)

(defun %( a b )
  (cond ((< a b) a) (t (% (- a b) b)))
)

(defun play( isubgame iplayer lscores lnames ) (prog( lresult )
  (print-rules isubgame)
  (setq lresult (start-mini-game (deal (generate-cards 0 1) 4) isubgame iplayer lnames))
  (print-result isubgame lnames lresult nil)
  
  (cond
    ((equal isubgame 6) (return (add-results lscores lresult)))
    (t (return (play (+ isubgame 1) (+ (% iplayer 4) 1) (add-results lscores lresult) lnames)))
  )
))

(defun get-names( ) (prog( lnames )
    (format t "~a~%" "-------------------------------------------------------------------------")
    (format t "~a~%" "  ievadiet pirma speletaja vardu:                                        ")
    (format t "~a~%" "-------------------------------------------------------------------------")
  (setq lnames (read))
    (format t "~a~%" "-------------------------------------------------------------------------")
    (format t "~a~%" "  ievadiet otra speletaja vardu:                                        ")
    (format t "~a~%" "-------------------------------------------------------------------------")
  (return (cons lnames (read))) 
))

(defun find-looser( lelements lnames iminimum szlooser )
  (cond
    ((null lelements) szlooser)
    ((> (car lelements) iminimum) (find-looser (cdr lelements) (cdr lnames) (car lelements) (car lnames)))
    (t (find-looser (cdr lelements) (cdr lnames) iminimum szlooser))
  )
)

(defun num-to-card( inum )
  (cond
    ((equal inum 7) 'septitnieks)
    ((equal inum 8) 'astotnieks)
    ((equal inum 9) 'devitnieks)
    ((equal inum 10) 'desmitnieks)
    ((equal inum 11) 'kalps)
    ((equal inum 12) 'dama)
    ((equal inum 13) 'karalis)
    ((equal inum 14) 'duzis)
  )
)

(defun num-to-game( inum )
  (cond
    ((equal inum 1) 'pirma)
    ((equal inum 2) 'otra)
    ((equal inum 3) 'tresa)
    ((equal inum 4) 'ceturta)
    ((equal inum 5) 'piekta)
    ((equal inum 6) 'sesta)
  )
)

(defun num-to-type( inum )
  (cond
    ((equal inum 1) 'sirds)
    ((equal inum 2) 'karavu)
    ((equal inum 3) 'krusta)
    ((equal inum 4) 'piki)
  )
)

(defun play-king() (prog( lnames lresults )
  (print-rules 0)

  (setq lnames (get-names))
  (setq lnames (append (cons (car lnames) '("pirmais dators")) (cons (cdr lnames) '("otrais dators"))))
  
  (setq lresults (play 1 (+ 1 (random 4)) '(0 0 0 0) lnames))
  (print-result 0 lnames lresults (find-looser lresults lnames 0 0))
  (return 0)
))
