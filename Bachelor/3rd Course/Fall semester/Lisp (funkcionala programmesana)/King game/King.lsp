(defun PrintResult(Game Players Points Looser)
   (cond ((> Game 0) 
	   (format t "~%~a~%" "-------------------------------------------------------------------------")
	   (format t "~a apaksspele ir beigusies. Speletajiem tika pieskaitits sekojoss soda punktu~%" (NumToGame Game))
	   (format t "~a~%" "skaits:"))
	   
	   (T (format t "~%~a~%" "-------------------------------------------------------------------------")
	   (format t "Spele ir beigusies. Speletajiem tika pieskaitits sekojoss soda punktu~%" (NumToGame Game))
	   (format t "~a~%" "skaits:"))
	)

   (DisplayList 1 Players Points)
   (format t "~%~%~a~%" "-------------------------------------------------------------------------")
   
   (cond ((null Looser) nil)
		(T
          (format t "~%~%~a~%" "=========================================================================")     
          (format t "Spele ir beigusies. Speli ir zaudejis ~@(~a.~)~%" Looser                   ) 
          (format t "~a~%" "========================================================================="))
	)
 )

(defun DisplayList(i lst l)
    (cond ((null lst) nil)
		(T (format t "~& ~{~2d) ~@(~2@a:~) -~(~1@a~)~}" (list i (car lst) (car l)))
		(DisplayList (+ i 1) (cdr lst) (cdr l)))
	)
)

(defun PrintCards(Player Cards)
    (format t "~%~@(~a~):~%" Player)
    (DisplayCard Cards 1)
    (format t "~%")
)


(defun DisplayCard(lst i)
    (cond ((null lst) nil)
	       ((< (cadar lst) 4) (format t "~& ~{~2d) ~(~a~) ~(~a~)~}" (list i (NumToType (cadar lst)) (NumToCard (caar lst))))
           (DisplayCard (cdr lst) (+ i 1)))
		   (t(format t "~& ~{~2d) ~(~a~) ~(~a~)~}" (list i (NumToCard (caar lst)) (NumToType (cadar lst))))
           (DisplayCard (cdr lst) (+ i 1)))
))

(defun PrintRules(num)
    (cond ((equal num 0)
           (format t "~a~%" "-------------------------------------------------------------------------")
           (format t "~a~%" "  Speles noteikumi:                                                      ")
           (format t "~a~%" "-------------------------------------------------------------------------")
           (format t "~a~%" "   Spele \"King\". Speletaju kartiba cilveks - dators - cilveks - dators.")
           (format t "~a~%" "Spele tiek izmantotas 32 kartis (karsu komplekta neietilpst sesinieki).  ")
           (format t "~a~%" "Spele sastav no 6 apaksspelem, kas sakas, kad kartis tiek izdalitas un   ") 
           (format t "~a~%" "beidzas, kad visas tiek izmestas ara.")
           (format t "~a~%" "Pirmais, kas sak apaksspeli izmet ara vienu karts, parejiem ir jaizmet")
           (format t "~a~%" "ara tada pasa masts karts, ja tada masts nav, ir jaizmet ara jebkura cita")
           (format t "~a~%" "masts karts. Speletajs, kurs izmeta ara vajadzigas masts karti ar")
           (format t "~a~%" "vislielako nominalu, nem ta saucamo stiki. Tam, kurs panema stiki, tiek")
           (format t "~a~%~%" "pieskaititi soda punkti atkariba no apaksspeles noteikumiem."))
          ((equal num 1)
           (format t "~a~%" "-------------------------------------------------------------------------")
           (format t "~a~%" "  Pirma apaksspele:                                                      ")
           (format t "~a~%" "-------------------------------------------------------------------------")
           (format t "~a~%" "  Nedrikst nemt nevienu no stikiem. Par katru panemto stiki 2 soda punkti")
           (format t "~a~%~%" "(-2). Maksimalais soda punktu skaits: -16."))
          ((equal num 2)
           (format t "~a~%" "-------------------------------------------------------------------------")
           (format t "~a~%" "  Otra apaksspele:                                                       ")
           (format t "~a~%" "-------------------------------------------------------------------------")
           (format t "~a~%" "  Nedrikst nemt nevienu sirds karti. Par katru panemto sirds karti 2 soda") 
           (format t "~a~%" "punkti (-2). Nedrikst sakt speli ar sirds kartim, ja rokas ir citas masts")
           (format t "~a~%~%" "kartis. Maksimalais soda punktu skaits: -16."))
          ((equal num 3)
           (format t "~a~%" "-------------------------------------------------------------------------")
           (format t "~a~%" "  Tresa apaksspele:                                                      ")
           (format t "~a~%" "-------------------------------------------------------------------------")
           (format t "~a~%" "  Nedrikst nemt nevienu kalpu. Par katru panemto kalpu 4 soda punkti(-4).") 
           (format t "~a~%~%" "Maksimalais soda punktu skaits: -16."))
          ((equal num 4)
           (format t "~a~%" "-------------------------------------------------------------------------")
           (format t "~a~%" "  Ceturta appakspele:                                                    ")
           (format t "~a~%" "-------------------------------------------------------------------------")
           (format t "~a~%" "   Nedrikst nemt nevienu damu. Par katru panemto damu 4 soda punkti (-4).") 
           (format t "~a~%~%" "Maksimalais soda punktu skaits: -16."))
          ((equal NUM 5)
           (format t "~a~%" "-------------------------------------------------------------------------")
           (format t "~a~%" "  Piekta appakspele:                                                     ")
           (format t "~a~%" "-------------------------------------------------------------------------")
           (format t "~a~%" "   Nedrikst nemt 2 pedejus stikus. Par katru panemto stiki 8 soda punkti ") 
           (format t "~a~%~%" "(-8). Maksimalais soda punktu skaits: -16."))
          ((equal NUM 6)
           (format t "~a~%" "-------------------------------------------------------------------------")
           (format t "~a~%" "  Sesta appakspele:                                                      ")
           (format t "~a~%" "-------------------------------------------------------------------------")
           (format t "~a~%" "  Nedrikst nemt sirds karali. Ja uz rokam nav vajadzigas masts karts un  ")
           (format t "~a~%" "ir sirds karalis, tad obligati ir jaiet ar to. Par sirds karali 16 soda  ")
           (format t "~a~%" "punkti (-16). Nedrikst sakt speli ar sirds kartim, ja uz rokam ir citu   ")
           (format t "~a~%~%" "mastu kartis."))
))

(defun PrintMessage(num Player Cards Sods)
	(prog (Input)
	(format t "~%" )
	(cond 
		((= num 0)
			(format t "~a~%" "-------------------------------------------------------------------------")
			(format t 		 "~a gajiens. Jums ir pieejamas sekojosas kartis:~%" Player)
			(format t "~a~%" "-------------------------------------------------------------------------")
			(DisplayCard Cards 1)
		)
		((= num 1)
			(format t "~a~%" "-------------------------------------------------------------------------")
			(format t        "Ievadiet karts numuru, ar kuru Jus gribat izdarit gajienu.    ~%")
			(format t "~a~%" "-------------------------------------------------------------------------")
			
			(Setq Input (read))
			(cond
			((not (numberp input)) (PrintError 1) (return (PrintMessage 1 NIL NIL NIL))) 
			(t
			(Cond ((< Input 1)
			(PrintError 1)
			(return (PrintMessage 1 NIL NIL NIL)))
			(t (return Input))
			)
			)
			)
			
			
		)
		((= num 2)
			(format t "~a~%" "-------------------------------------------------------------------------")
			(format t        "Pirma datora gajiens. Izmestas kartis pec gajiena:            ~%")
			(format t "~a~%" "-------------------------------------------------------------------------")
			(DisplayCard Cards 1)
		)		
		((= num 3)
			(format t "~a~%" "-------------------------------------------------------------------------")
			(format t        "Otra datora gajiens. Izmestas kartis pec gajiena:            ~%")
			(format t "~a~%" "-------------------------------------------------------------------------")
			(DisplayCard Cards 1)			
		)	
		((= num 4)
			(format t "~a~%" " ")
			(format t        "Izmestas kartis pec gajiena:         ~%")
			(format t "~a~%" "-------------------------------------------------------------------------")
			(DisplayCard Cards 1)			
		)
		((= num 5)
			(format t "~a~%" "-------------------------------------------------------------------------")
			(format t        "Speletajs ~a ir panemis stiki. Speletajam tika pieskaititi ~a soda punkti.~%" Player Sods)
			(format t "~a~%" "-------------------------------------------------------------------------")			
		)		
	)
	)
)

(defun PrintError(num)
  (cond ((= num 0)
         (format nil "~a" "Spele var spelet tikai 4 speletaji!"))
        ((= num 1)
         (format t "~%~a~%" "-------------------------------------------------------------------------")
         (format t "~a~%" "Kluda! Jums nav pieejama tada karts. Ievadiet karts numuru, ar kuru Jus"    ) 
         (format t "~a~%" "gribat izdarit gajienu."                                                    )
         (format t "~a~%" "-------------------------------------------------------------------------" ))
        ((= num 2)
         (format t "~%~a~%" "-------------------------------------------------------------------------")
         (format t "~a~%" "Kluda! Jus nevarat izmest so karti, Jums uz rokam ir karavi. Ievadiet "  ) 
         (format t "~a~%" "karts numuru, ar kuru Jus gribat izdarit gajienu."                                )
         (format t "~a~%" "-------------------------------------------------------------------------" ))
        ((= num 3)
         (format t "~%~a~%" "-------------------------------------------------------------------------")
         (format t "~a~%" "Kluda! Jus nevarat izmest so karti, Jums uz rokam ir krusti. Ievadiet      ") 
         (format t "~a~%" "karts numuru, ar kuru Jus gribat izdarit gajienu."                          )
         (format t "~a~%" "-------------------------------------------------------------------------" ))
        ((= num 4)
         (format t "~%~a~%" "-------------------------------------------------------------------------")
         (format t "~a~%" "Kluda! Jus nevarat izmest so karti, Jums uz rokam ir piki. Ievadiet karts"  ) 
         (format t "~a~%" "numuru, ar kuru Jus gribat izdarit gajienu."                                )
         (format t "~a~%" "-------------------------------------------------------------------------" ))
        ((= num 5)
         (format t "~%~a~%" "-------------------------------------------------------------------------")
         (format t "~a~%" "Kluda! Jus nevarat izmest so karti, Jums uz rokam ir sirdis. Ievadiet      ") 
         (format t "~a~%" "karts numuru, ar kuru Jus gribat izdarit gajienu."                          )
         (format t "~a~%" "-------------------------------------------------------------------------" ))
        ((= num 6)
         (format t "~%~a~%" "-------------------------------------------------------------------------")
         (format t "~a~%" "Kluda! Jus nedrikstat sakt speli ar sirds masts karti, jo Jums uz rokam    ") 
         (format t "~a~%" "ir citu masts kartis. Ievadiet karts numuru, ar kuru Jus saksiet speli."    )
         (format t "~a~%" "-------------------------------------------------------------------------" ))
        ((= num 7)
         (format t "~%~a~%" "-------------------------------------------------------------------------")
         (format t "~a~%" "Jus nedriksat izdarit sadu gajienu! Jums uz rokam ir sirds karalis, ar     ") 
         (format t "~a~%" "kuru Jums obligati ir jastaiga."                                            )
         (format t "~a~%" "-------------------------------------------------------------------------" ))
))

(prog (WrongInput Bot SmartBot Table CurrentPlayer PsPlayer LoserPlayer CurrentTaken CurrentTurn Points CardList MiniGameNumber FirstPlayerNumber NameList Temp ) 

(defun Output(Old)
	(cond ((equal Old '(1)) (list NIL))
		(t Old)
	)
)

(defun GetName (PlayerNumber NameList)
	(cond ((equal PlayerNumber 1) (car NameList))
		(t (GetName (- PlayerNumber 1) (cdr NameList)))
	)
)

(defun GetLoser(Taken FirstCard Loser LoserCardVal Player)
	(cond ((null (car taken)) Loser)
		(t (cond ((and (equal (cdr (car Taken)) (cdr FirstCard))(> (car (car Taken)  ) LoserCardVal )) (GetLoser (cdr Taken) FirstCard Player (car (car Taken)) (+ Player 1)))
			(t (GetLoser (cdr Taken) FirstCard Loser LoserCardVal (+ Player 1)))
		))
	)
)

(defun SetPoints (PointList PointCount temp NewPoints)
	(cond ((equal temp LoserPlayer) (SetPoints (cdr PointList) PointCount (+ temp 1) (Append NewPoints (list (+ (car PointList) PointCount)))  ))
		(t (cond ((null (car PointList )) NewPoints)
			(t (SetPoints (cdr PointList) PointCount (+ temp 1) (Append NewPoints (list (car PointList)))))
		))
	)
)

(defun CountPlayersCards (temp PlayersCardList)
	(cond ((null (car PlayersCardList)) temp)
		(t (CountPlayersCards (+ temp 1) (cdr PlayersCardList)))
	)
)

(defun MaxTableCard (Table1 MaxCard)
	(cond ((null (car Table1))  MaxCard  )
		(t (cond ((and (equal (car(cdr(car Table1))) (car(cdr(car Table)) )) (> (car(car Table1)) (car MaxCard))) (MaxTableCard (cdr Table1) (car Table1)))
		(t (MaxTableCard (cdr Table1) MaxCard))))
	)
)

(defun GetNumber (SpisokNomerov Nomer)
	(cond ((equal 1 Nomer) (car SpisokNomerov))
	(t (GetNumber (cdr SpisokNomerov) (- Nomer 1)))) 
)

(defun MinPlayersCards (Cards MaxCards MaxCardsNums Num)
(cond 
((null (car Cards)) MaxCardsNums)
((and (not 
(and(or (and  (equal MiniGameNumber 6)  (equal (car(cdr (car Cards))) 1 ) ) (and  (equal MiniGameNumber 2)  (equal (car(cdr (car Cards))) 1) )) (equal 1 (GotNotCherviFun (GetOnePlayersCards CardList CurrentPlayer))))
) (< (car (car Cards)) (car (car MaxCards)))) (MinPlayersCards (cdr Cards)  (List (car Cards)) (List Num) (+ Num 1))        )
((and (not (or (and  (equal MiniGameNumber 6)  (equal (car(cdr (car Cards))) 1 ) ) (and  (equal MiniGameNumber 2)  (equal (car(cdr (car Cards))) 1) ))) (equal (car (car Cards)) (car (car MaxCards)))) (MinPlayersCards (cdr Cards)  (Append  MaxCards (List(car Cards))) (Append MaxCardsNums (List Num)) (+ Num 1))        )
(t (MinPlayersCards (cdr Cards) MaxCards MaxCardsNums (+ Num 1) ))
)
)

(defun MaxPlayersCards (Cards MaxCards MaxCardsNums Num)
(cond 
((null (car Cards)) MaxCardsNums)
((> (car (car Cards)) (car (car MaxCards))) (MaxPlayersCards (cdr Cards)  (List (car Cards)) (List Num) (+ Num 1))        )
((equal (car (car Cards)) (car (car MaxCards))) (MaxPlayersCards (cdr Cards)  (Append  MaxCards (List(car Cards))) (Append MaxCardsNums (List Num)) (+ Num 1))        )
(t (MaxPlayersCards (cdr Cards) MaxCards MaxCardsNums (+ Num 1) ))
)
)

(defun IhaveRightCard (WhatDoWeSearch MiniCardList MinFit MinFitNum MinNotFit MinNotFitNum MaxNotFit MaxNotFitNum Num)
(cond ((null (car MiniCardList)) (List MinFitNum MinNotFitNum MaxNotFitNum));konec
((equal (car (cdr (car MiniCardList)))  (car (cdr WhatDoWeSearch))) 
  (cond
   ((< (car (car MiniCardList)) (car WhatDoWeSearch)   )
       (cond
          ((> (car (car MiniCardList)) MinFit) 
           (IhaveRightCard WhatDoWeSearch (cdr MiniCardList) (car (car MiniCardList)) Num MinNotFit MinNotFitNum MaxNotFit MaxNotFitNum (+ Num 1))
          )
          (t
           (IhaveRightCard WhatDoWeSearch (cdr MiniCardList) MinFit MinFitNum MinNotFit MinNotFitNum MaxNotFit MaxNotFitNum (+ Num 1))
          )
       )
   )
   (t
       (cond
          ((> (car (car MiniCardList)) MaxNotFit) 
          (cond ((< (car (car MiniCardList)) MinNotFit) 
          (IhaveRightCard WhatDoWeSearch (cdr MiniCardList) MinFit MinFitNum (car (car MiniCardList)) Num (car (car MiniCardList)) Num (+ Num 1)) )
          (t(IhaveRightCard WhatDoWeSearch (cdr MiniCardList) MinFit MinFitNum MinNotFit MinNotFitNum (car (car MiniCardList)) Num (+ Num 1)))))
          (t(cond
          ((< (car (car MiniCardList)) MinNotFit) 
          (IhaveRightCard WhatDoWeSearch (cdr MiniCardList) MinFit MinFitNum (car (car MiniCardList)) Num  MaxNotFit MaxNotFitNum (+ Num 1)))
          (t(IhaveRightCard WhatDoWeSearch (cdr MiniCardList) MinFit MinFitNum MinNotFit MinNotFitNum  MaxNotFit MaxNotFitNum (+ Num 1)))))
       )
   )     
  )
)
(t(IhaveRightCard WhatDoWeSearch (cdr MiniCardList) MinFit MinFitNum MinNotFit MinNotFitNum MaxNotFit MaxNotFitNum (+ Num 1))))
)

(defun GoPc ()
(cond
((and (or (equal CurrentPlayer 1) (equal CurrentPlayer 3))(not (equal SmartBot 1)))
(setq Temp (+ (random 12 ) 1)) Temp) 
(t(cond((equal PsPlayer 1)
(GetNumber (MinPlayersCards (Output(GetOnePlayersCards CardList CurrentPlayer)) '((100 100)) '(0) 1) (+ 1 (Random (CountPlayersCards 0 (MinPlayersCards (Output(GetOnePlayersCards CardList CurrentPlayer)) '((100 100)) '(0) 1)) )))
)
(t(cond 
	((not (equal '(100 100 100) (IhaveRightCard (MaxTableCard Table '(0 0)) (Output(GetOnePlayersCards CardList CurrentPlayer)) '0 '100 '100 '100  '0 '100 '1) ))
		(setq Temp (IhaveRightCard (MaxTableCard Table '(0 0)) (Output(GetOnePlayersCards CardList CurrentPlayer)) '0 '100 '100 '100  '0 '100 '1))
               (cond
                ((< (car Temp) '100) (car Temp))
                (t(cond
                  ((or (equal PsPlayer 2) (equal PsPlayer 2)) (car (cdr Temp))   )
                  (t (car(cdr(cdr Temp)) )))
                 )
                )
	)
(t(cond
((not (and (equal MiniGameNumber 6)(> (CheckKCh (GetOnePlayersCards CardList CurrentPlayer) 0) 0)))
(setq Temp (GetNumber (MaxPlayersCards (Output(GetOnePlayersCards CardList CurrentPlayer)) '((0 0)) '(0) 1) (+ 1 (Random (CountPlayersCards 0 (MaxPlayersCards (Output(GetOnePlayersCards CardList CurrentPlayer)) '((0 0)) '(0) 1)) ))))
)(t(setq Temp (GetKChNum (GetOnePlayersCards CardList CurrentPlayer) 1)))) Temp)))
))
)
)

(defun GetKChNum (Cards Nomer)
(cond 
((null (car Cards)) '0)
((equal (car Cards) '(13 1) ) Nomer)
(t (GetKChNum (cdr Cards) (+ Nomer 1)))
)
)

(defun ReadSel()
(cond 
((or (equal Bot 1) (or (equal CurrentPlayer 2) (equal CurrentPlayer 4))) (GoPc))
((equal WrongInput 1) (read))
(t (PrintMessage 1 NIL (CountPlayersCards 0 (GetOnePlayersCards CardList CurrentPlayer) ) NIL))
))

(defun OrdinaryTurn(red)
(cond 
((equal PsPlayer 1) (FirstTurn red))
(t(cond
((>(CheckOrdinaryCard (WatchCard (GetOnePlayersCards CardList CurrentPlayer) red) (GetOnePlayersCards CardList CurrentPlayer) ) 0) 
(PrintError (CheckOrdinaryCard (WatchCard (GetOnePlayersCards CardList CurrentPlayer) red) (GetOnePlayersCards CardList CurrentPlayer) )  )
(OrdinaryTurn (ReadSel )))
((or(> red (CountPlayersCards 0 (GetOnePlayersCards CardList CurrentPlayer) )) (<= red 0))
(PrintError 1)
(setq WrongInput 1)
(OrdinaryTurn (ReadSel )))
(t red))))
)

(defun FirstTurn(red)
(cond
((>(CheckFirstCard (WatchCard (GetOnePlayersCards CardList CurrentPlayer) red) (GetOnePlayersCards CardList CurrentPlayer) ) 0)   
(PrintError (CheckFirstCard (WatchCard (GetOnePlayersCards CardList CurrentPlayer) red) (GetOnePlayersCards CardList CurrentPlayer) ))
(FirstTurn (ReadSel )))
((or(> red (CountPlayersCards 0 (GetOnePlayersCards CardList CurrentPlayer) )) (<= red 0))
(PrintError 1)
(setq WrongInput 1)
(OrdinaryTurn (ReadSel )))
(t red))
)
;
(defun PreCycle()
(setq CurrentPlayer FirstPlayerNumber)
(setq PsPlayer 1)
(setq CurrentTaken 1)
(setq Table '())
(setq Points '(0 0 0 0))
(setq CurrentTurn 1)
(Cycle)
)

(defun makeLoser(FirstPlayerNumber LoserNumber)
(cond 
((equal FirstPlayerNumber 1) LoserNumber)
(t (makeLoser (- FirstPlayerNumber 1) (CyclePlayerNumber LoserNumber)  )
))
)

(defun Cycle()
(cond ((equal CurrentPlayer 2))
((equal CurrentPlayer 4))
(t (PrintMessage 0 (GetName CurrentPlayer NameList) (GetOnePlayersCards CardList CurrentPlayer) NIL) )
)
(setq temp (ThrowCard (GetOnePlayersCards CardList CurrentPlayer)(OrdinaryTurn  (ReadSel )) () NIL))
(CardOnTable (car temp))
(setq CardList (UpdatePlayer CardList (cdr temp)  CurrentPlayer  ()))
(cond 
((equal CurrentPlayer 2)  
(PrintMessage 2 NIL Table NIL))
((equal CurrentPlayer 4)  
(PrintMessage 3 NIL Table NIL))
(t (PrintMessage 4 NIL Table NIL) ))
(Setq CurrentPlayer (CyclePlayerNumber CurrentPlayer))
(Setq PsPlayer (CyclePlayerNumber PsPlayer))
(cond ((equal CurrentTurn 4) 
(setq CurrentTurn 1) 
(setq LoserPlayer  (MakeLoser FirstPlayerNumber (GetLoser Table (car Table) '1 '0 '1) )) 
(setq CurrentPlayer LoserPlayer)
(setq FirstPlayerNumber LoserPlayer)
(Setq Points (SetPoints Points (CheckPoints Table) '1 '()))
(PrintMessage 5 (GetName LoserPlayer  NameList) NIL (CheckPoints Table))
(setq CurrentTaken (+ CurrentTaken 1))
(format t "~%" )
(setq Table '()))
(t (setq CurrentTurn (+ CurrentTurn 1)) ))
(cond 
((< CurrentTaken 9) (Cycle))
(t))
)

(defun outc(PlayerNumber Cards)
(PrintCards (GetName PlayerNumber NameList) (Output(GetOnePlayersCards Cards PlayerNumber)))
(PrintCards 'Galds Table)
)

(defun CurrentMastjFun()
(car (cdr (car Table )))
)

(defun GotKChFun(PlayerCards)
(cond 
((null (car PlayerCards) ) 0)
((equal (car PlayerCards) '(13 1) ) 1)
(T (GotKChFun (cdr PlayerCards) )) 
)
)

(defun GotWrongCardsFun(PlayerCards)
(cond
((null (car PlayerCards)) 1)
((equal (car (cdr (car PlayerCards)) ) (CurrentMastjFun)) 0)
(t (GotWrongCardsFun (cdr PlayerCards))

)
)
)

(defun GotNotCherviFun(PlayerCards)
(cond
((null (car PlayerCards)) 0)
((> (car (cdr (car PlayerCards)) ) 1) 1)
(t (GotNotCherviFun (cdr PlayerCards))

)
)
)

(defun CheckFirstCard (Card PlayerCards)
(cond
((and (equal (GotNotCherviFun PlayerCards) 1) (or (equal MiniGameNumber 2) (equal MiniGameNumber 6))) 
(cond
((equal (car (cdr Card)) 1) 6)
(T 0)))
(T 0))
)

(defun CheckOrdinaryCard (Card PlayerCards)
(cond 
((and (not (equal Card '(13 1))) (and (equal (GotKChFun PlayerCards) 1) (and (equal (GotWrongCardsFun PlayerCards ) 1) (equal MiniGameNumber 6))) )  7)
(T(cond
( (and (not(equal (CurrentMastjFun) (car (cdr Card))) )  (equal (GotWrongCardsFun PlayerCards) 0))    
(cond
((equal (car (cdr (car Table))) 1) 5)
((equal (car (cdr (car Table))) 2) 2)
((equal (car (cdr (car Table))) 3) 3)
((equal (car (cdr (car Table))) 4) 4)
))
(t 0))))
)

(defun CheckPoints (TakenCards)
(cond
((equal MiniGameNumber 1) 2)
((equal MiniGameNumber 2)
(*(CheckChervi TakenCards '0) 2))
((equal MiniGameNumber 3)
(*(CheckValti TakenCards '0) 4))
((equal MiniGameNumber 4)
(*(CheckDami TakenCards '0) 4))
((equal MiniGameNumber 5)
(cond ((> CurrentTaken 6) 8) (T 0)))
((equal MiniGameNumber 6)
(*(CheckKCh TakenCards '0) 16)) (T 0))
)

(defun CheckKCh(TakenCards KChCount)
(cond
((null (car TakenCards))  KChCount)
(T (cond
((equal  (car TakenCards) '(13 1)) 
(CheckKCh (cdr TakenCards ) (+ KChCount 1)))
(T (CheckKCh (cdr TakenCards )  KChCount ))))))

(defun CheckValti(TakenCards ValtiCount)
(cond
((null (car TakenCards))  ValtiCount)
(T (cond
((equal (car (car TakenCards)) 11) 
(CheckValti (cdr TakenCards ) (+ ValtiCount 1)))
(T(CheckValti (cdr TakenCards )  ValtiCount )))))
)

(defun CheckDami(TakenCards DamiCount)
(cond
((null (car TakenCards))  DamiCount)
(T (cond
((equal (car (car TakenCards)) 12) 
(CheckDami (cdr TakenCards ) (+ DamiCount 1)))
(T (CheckDami (cdr TakenCards )  DamiCount )))))
)

(defun CheckChervi(TakenCards CherviCount)
(cond
((null (car TakenCards))  CherviCount)
(T (cond
((equal (car (cdr (car TakenCards))) 1) 
(CheckChervi (cdr TakenCards ) (+ CherviCount 1)))
(T (CheckChervi (cdr TakenCards )  CherviCount )))))
)

(defun CardOnTable(Card)
(setq Table (Append Table (List Card))) Table)

(defun CyclePlayerNumber(PlayerNumber)
(cond ((equal PlayerNumber 4) 1)
(t (+ PlayerNumber 1)))
)

(defun UpdatePlayer (CardList MiniCardList PlayerNumber NewCardList)
(cond ((Null  (car MiniCardList) ) (setq MiniCardList '((1))))) 
(cond((null (car CardList)) NewCardList )
(t (cond
((equal PlayerNumber 1) (UpdatePlayer (cdr CardList) MiniCardList (- PlayerNumber 1)  (append  NewCardList MiniCardList)))
(t (UpdatePlayer (cdr CardList) MiniCardList (- PlayerNumber 1)  (append NewCardList (List (car CardList))))
))))
)

(defun WatchCard (MiniCardList CardNumber)
(cond ((equal CardNumber 1) (car MiniCardList))
(t (WatchCard (cdr MiniCardList) (- CardNumber 1)))
))

(defun ThrowCard (MiniCardList CardNumber NewCardList Card)
(cond ((null (car MiniCardList)) (append (List Card)(List NewCardList)))
(t (cond
((equal CardNumber 1) (ThrowCard (cdr MiniCardList) (- CardNumber 1) NewCardList (car MiniCardList))) 
(t  (ThrowCard (cdr MiniCardList) (- CardNumber 1) (Append NewCardList (List (car MiniCardList))) Card ) ))))
)

(defun GetOnePlayersCards (CardList PlayerNumber)
(cond
((equal PlayerNumber 1) (car CardList))
(T (GetOnePlayersCards (cdr CardList) (- PlayerNumber 1))))
)

(defun StartMiniGame (CardList1 MiniGameNumber1 FirstPlayerNumber1 NameList1)
(setq CardList CardList1 )
(setq MiniGameNumber MiniGameNumber1 )
(setq FirstPlayerNumber FirstPlayerNumber1 )
(setq NameList NameList1 )
(precycle)Points)
)

(defun CardPick( lElements iPos )
	(cond
		((zerop iPos) (car lElements))
		(T(CardPick (cdr lElements) (- iPos 1)))
	)
)

(defun DeleteElementFromPos( lElements iPos )
	(cond
		((zerop iPos) (cdr lElements))
		(T(cons(car lElements)(DeleteElementFromPos (cdr lElements) (- iPos 1))))
	)
)

(defun DeleteElement( lElements iCard iType )
	(cond
		((null lElements) nil)
		((and (equal (car (car lElements)) iCard) (equal (cdr (car lElements)) iType)) 
			(cdr lElements) 
		)
		(T(cons(car lElements)(DeleteElement (cdr lElements) iCard iType )))
	)
)

(defun RefreshElements( lElements lResult )
	(cond
		((null (car lResult)) lElements)
		(T(RefreshElements (DeleteElement lElements (car (car lResult)) (cdr (car lResult))) ( cdr lResult )))
	)
)

(defun DealSet( lElements iSize iCount iPos )
	(cond
		((zerop iSize) nil)
		((AND(equal iSize 8)(equal iCount 7)) (DealSet lElements iSize iSize iPos))
		((equal iCount 1) (cons(CardPick lElements iPos) nil))
		(T(cons(CardPick lElements iPos)( DealSet ( DeleteElementFromPos lElements iPos ) (- iSize 1) (- iCount 1) (random (- iSize 1)))))
	)
)

(defun DealCards( lElements iSize iLeft iPlayers iCount lSetResult )
	(setq lElements (RefreshElements lElements lSetResult))
	
	(cond
		((zerop iLeft) (list lSetResult))
		(T(cons lSetResult (DealCards lElements (- iSize iCount) (- iLeft 1) iPlayers iCount ( DealSet lElements (- iSize iCount) iCount (random (- iSize iCount))))))
	)
)

(defun GenerateCards( iCard iType )
	(cond
		((equal iCard 8) nil)
		((equal iType 5) ( GenerateCards (+ iCard 1) 1))
		(T(cons (list (+ 7 iCard) iType) (GenerateCards iCard (+ iType 1))))
	)
)

(defun Deal( lElements iPlayers )
	(cond
		((zerop iPlayers) nil)
		(T(DealCards lElements 32 (- iPlayers 1) iPlayers 8 ( DealSet lElements 32 8 (random 32))))
	)
)

(defun AddResults( lResultsA lResultsB )
	(cond
		((OR (null lResultsA) (null lResultsB)) nil)
		(T(cons (+ (car lResultsA) (car lResultsB))(AddResults (cdr lResultsA) (cdr lResultsB))))
	)
)

(defun %( a b )
	(cond ((< a b) a) (T (% (- a b) b)))
)

(defun Play( iSubGame iPlayer lScores lNames ) (prog( lResult )
	(PrintRules iSubGame)
	(setq lResult (StartMiniGame (Deal (GenerateCards 0 1) 4) iSubGame iPlayer lNames))
	(PrintResult iSubGame lNames lResult nil)
	
	(cond
		((equal iSubGame 6) (return (AddResults lScores lResult)))
		(T (return (Play (+ iSubGame 1) (+ (% iPlayer 4) 1) (AddResults lScores lResult) lNames)))
	)
))

(defun GetNames( ) (prog( lNames )
    (format t "~a~%" "-------------------------------------------------------------------------")
    (format t "~a~%" "  Ievadiet pirma speletaja vardu:                                        ")
    (format t "~a~%" "-------------------------------------------------------------------------")
	(setq lNames (read))
    (format t "~a~%" "-------------------------------------------------------------------------")
    (format t "~a~%" "  Ievadiet otra speletaja vardu:                                        ")
    (format t "~a~%" "-------------------------------------------------------------------------")
	(return (cons lNames (read)))	
))

(defun FindLooser( lElements lNames iMinimum szLooser )
	(cond
		((null lElements) szLooser)
		((> (car lElements) iMinimum) (FindLooser (cdr lElements) (cdr lNames) (car lElements) (car lNames)))
		(T(FindLooser (cdr lElements) (cdr lNames) iMinimum szLooser))
	)
)

(defun NumToCard( iNum )
	(cond
		((equal iNum 7) 'septitnieks)
		((equal iNum 8) 'astotnieks)
		((equal iNum 9) 'devitnieks)
		((equal iNum 10) 'desmitnieks)
		((equal iNum 11) 'kalps)
		((equal iNum 12) 'dama)
		((equal iNum 13) 'karalis)
		((equal iNum 14) 'duzis)
	)
)

(defun NumToGame( iNum )
	(cond
		((equal iNum 1) 'Pirma)
		((equal iNum 2) 'Otra)
		((equal iNum 3) 'Tresa)
		((equal iNum 4) 'Ceturta)
		((equal iNum 5) 'Piekta)
		((equal iNum 6) 'Sesta)
	)
)

(defun NumToType( iNum )
	(cond
		((equal iNum 1) 'sirds)
		((equal iNum 2) 'karavu)
		((equal iNum 3) 'krusta)
		((equal iNum 4) 'piki)
	)
)

(defun PlayKing() (prog( lNames lResults )
	(PrintRules 0)

	(setq lNames (GetNames))
	(setq lNames (append (cons (car lNames) '("Pirmais dators")) (cons (cdr lNames) '("Otrais dators"))))
	
	(setq lResults (Play 1 (+ 1 (random 4)) '(0 0 0 0) lNames))
	(PrintResult 0 lNames lResults (FindLooser lResults lNames 0 0))
	(return 0)
))
